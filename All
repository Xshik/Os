A.) FCFS.
CODE:
#include<stdio.h>
void main(){
int bt[20],wt[20],tat[20],i,n;
float wtavg =0,tatavg=0;
int tottime =0;
printf("Enter the number of processes: ");
scanf("%d",&n);
for(i=0;i<n;i++){
printf("\nEnter burst time for processes %d: ",i);
scanf("%d",&bt[i]);
}
for(i=0;i<n;i++){
tottime+=bt[i];
tat[i]=tottime;
wt[i]=tat[i]-bt[i];
wtavg=wtavg+wt[i];
tatavg=tatavg+tat[i];
}
printf("\t PROCESS \t BURST TIME\t WATING TIME\t TURNAROUND TIME \n");
for(i=0;i<n;i++)
printf("\n\t p%d \t\t  %d\t\t  %d\t\t  %d",i,bt[i],wt[i],tat[i]);
printf("\nAverage Wating Time: %f\n",wtavg/n);
printf("\n Average Turnaround Time: %f\n",tatavg/n);
}
OUTPUT:
Enter the number of processes: 3
Enter burst time for processes 0: 24
Enter burst time for processes 1: 3
Enter burst time for processes 2: 3
 PROCESS         BURST TIME      WATING TIME     TURNAROUND TIME
         p0                     24		     0			24
         p1	                     3	                   24			27
         p2                      3		    27			30
Average Wating Time: 17.000000
 Average Turnaround Time: 27.000000



B.) SJF.
CODE:
#include<stdio.h>
void main(){
int p[20],bt[20],wt[20],tat[20],i,k,n,temp;
float wtavg=0,tatavg=0;
int tottime=0;
printf("Enter the number of processes:");
scanf("%d",&n);
for(i=0;i<n;i++) {
p[i]=i;
printf("Enter burst time for process %d:",i);
scanf("%d",&bt[i]);
}
for(i=0;i<n;i++) {
for(k=i+1;k<n;k++) {
if(bt[i]>bt[k]) {
temp=bt[i];
bt[i]=bt[k];
bt[k]=temp;
temp=p[i];
p[i]=p[k];
p[k]=temp;
}
}
}
for(i=0;i<n;i++) {
tottime+=bt[i];
tat[i]=tottime;
wt[i]=tottime-bt[i];
wtavg+=wt[i];
tatavg+=tat[i];
}
printf("\tPROCESS\tBURST TIME\tWAITING TIME\tTURNAROUND TIME\n");
for(i=0;i<n;i++) {
printf("\n\tp%d\t\t%d\t\t%d\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
printf("\nAverage Waiting Time=%f",wtavg/n);
printf("\nAverage Turnaround Time=%f",tatavg/n);
}
OUTPUT:
Enter the number of processes:3
Enter burst time for process 0:5
Enter burst time for process 1:2
Enter burst time for process 2:3
 PROCESS     BURST TIME      WAITING TIME    TURNAROUND TIME
        p1                 2                            0               	       2
        p2                 3                            2               	       5
        p0                 5                            5               	      10
Average Waiting Time=2.333333
Average Turnaround Time=5.666667


2.) Producer-Consumer.
CODE:
#include<stdio.h>
#include<stdlib.h>
#define buffsize 3
int in=0,out=0,buff[10],nextP,nextC,mutex=1,full=0,empty=buffsize;
int wait(int s){
return (--s);
}
int signal(int s){
return (++s);
}
void producer(){
printf("Enter the item produced:");
scanf("%d",&nextP);
empty=wait(empty);
mutex=wait(mutex);
buff[in]=nextP;
in=(in+1)%buffsize;
mutex=signal(mutex);
full=signal(full);
}
void consumer() {
full=wait(full);
mutex=wait(mutex);
nextC=buff[out];
printf("\nConsumer consumes item %d",nextC);
out=(out+1)%buffsize;
mutex=signal(mutex);
empty=signal(empty);
}
void main() {
int n;
printf("\n1.Producer\n2.Consumer\n3.Exit");
while(1) {
printf("\nEnter your choice:");
scanf("%d",&n);
switch(n) {
case 1:
if((mutex==1)&&(empty!=0))
producer();
else
printf("Buffer is full");
break;
case 2:
if((mutex==1)&&(full!=0))
consumer();
else
printf("Buffer is empty!");
break;
case 3:
return 0;
}
}}}


3.) Dining-Philosopher.
CODE:
#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<stdint.h>
#define NUM_PHILOSOPHERS 5
#define EATING 0
#define THINKING 1
#define HUNGRY 2
pthread_mutex_t forks[NUM_PHILOSOPHERS];
int philosophers[NUM_PHILOSOPHERS] ={THINKING};
void* philosopher(void* arg) {
int id=*(int*)arg;
int left_fork=id;
int right_fork=(id+1)%NUM_PHILOSOPHERS;
while(1){
printf("Philosopher %d is thinking.\n",id);
sleep(1);
philosophers[id]=HUNGRY;
printf("Philosopher %d is hungry.\n",id);
pthread_mutex_lock(&forks[left_fork]);
printf("Philosopher %d picked up left fork.\n",id);
if (pthread_mutex_trylock(&forks[right_fork])==0) {
printf("Philosopher %d picked up right fork.\n",id);
philosophers[id]=EATING;
printf("Philosopher %d is eating.\n",id);
sleep(2);
pthread_mutex_unlock(&forks[right_fork]);
pthread_mutex_unlock(&forks[left_fork]);
} else{
printf("Philosopher %d couldn't pick up right fork. Putting down left fork.\n",id);
pthread_mutex_unlock(&forks[left_fork]);
}
}
}
int main(){
pthread_t tid[NUM_PHILOSOPHERS];
int ids[NUM_PHILOSOPHERS],i;
for(i=0;i<NUM_PHILOSOPHERS;i++){
pthread_mutex_init(&forks[i],NULL);
}
for(i=0;i<NUM_PHILOSOPHERS;i++){
ids[i]=i;
pthread_create(&tid[i],NULL,philosopher,&ids[i]);
}
for(i=0;i<NUM_PHILOSOPHERS;i++){
pthread_join(tid[i], NULL);
}
for(i=0;i<NUM_PHILOSOPHERS;i++){
pthread_mutex_destroy(&forks[i]);
}
return 0;
}





4.)     A.) MFT.
CODE:
#include <stdio.h>
int main(){
int tm,om,n,i,block_size,internal_frag=0,ex_frag,waste;
printf("Enter total memory size, memory for OS, No. of processes: ");
scanf("%d %d %d",&tm,&om,&n);
int process[n];
tm-=om;
block_size=tm/n;
ex_frag=tm-block_size*n;
for(i=0;i<n;i++) {
printf("Enter size of process %d: ",i+1);
scanf("%d",&process[i]);
if(process[i]<= block_size){
waste=block_size-process[i];
internal_frag+=waste;
printf("Memory allocated to process %d is: %d\n",i+1,process[i]);
}else{
printf("Process %d is blocked, no sufficient memory available\n",i+1);
ex_frag+=block_size;
}
}
printf("Total memory for user space = %d.\n",tm);
printf("External Fragmentation is %d.\n",ex_frag);
printf("Internal Fragmentation is %d\n",internal_frag);
return 0;
}


4.)     B.) MVT.
CODE:
#include<stdio.h>
#include<string.h>
int main(){
int tm,mp[10],i,pid[50],temp,n=0,osm,allotedpc=0,allotedp[50],flag[50];
char ch='y';
printf("Enter the total memory available (in Bytes): ");
scanf("%d",&tm);
printf("Enter the memory required by OS (in Bytes): ");
scanf("%d",&osm);
tm-=osm;
temp=tm;
for(i=0;i<50;i++) {
flag[i]=0;
}
for(i=0;ch=='y';i++,n++){
printf("Enter memory required for process %d (in Bytes): ",i+1);
scanf("%d",&mp[i]);
if(mp[i]<=temp){
printf("Memory is allocated for Process %d\n",i+1);
temp-=mp[i];
flag[i]=1;
}else{
printf("No sufficient memory available\n");
flag[i]=0;
}
printf("Do you want to continue (y/n): ");
scanf(" %c",&ch);
}
printf("\nTotal Memory Available: %d",tm);
printf("\n\n\tPROCESS\t\tMEMORY ALLOCATED\n");
for(i=0;i<n;i++) {
if(flag[i]==0) continue;
printf("\t%d\t\t%d\n",i+1,mp[i]);
}
printf("Total Memory Allocated: %d\n",tm-temp);
printf("Total External Fragmentation: %d\n",temp);
return 0;
}




5.) BANKERâ€™S ALGORITHM.
CODE:
#include<stdio.h>
#define PROCESSES 10
#define RESOURCES 10
int available[RESOURCES],work[RESOURCES];
int max[PROCESSES][RESOURCES];
int allocation[PROCESSES][RESOURCES];
int need[PROCESSES][RESOURCES];
int p,r,finish[PROCESSES];

int safety(){
int safeSequence[PROCESSES];
int count=0,j,i,k,flag=0;
for (i=0;i<r;i++) {
work[i]=available[i];
}
for(i=0;i<p;i++){
finish[i]=0;
}
while(count<p){
flag=0;
for(i=0;i<p;i++){
if(!finish[i]){
for(j=0;j<r;j++){
if(need[i][j]>work[j])
break;
}
if(j==r){ 
for(k=0;k<r;k++){
work[k]+=allocation[i][k];
}
safeSequence[count++]=i;
finish[i]=1;
flag=1;
}
}
}
if(!flag){ 
printf("System is in unsafe state!\n");
return 0;
}
}
printf("Safe sequence: ");
for(i=0;i<p-1;i++)
printf("P%d -> ",safeSequence[i]);
printf("P%d\n",safeSequence[p-1]);
return 1;
}

int requestResources(int process,int request[]){
for(int i=0;i<r;i++){
if(request[i]>need[process][i]||request[i]>available[i])
return 0;
}
for (int i=0;i<r;i++){
available[i]-=request[i];
allocation[process][i]+=request[i];
need[process][i]-=request[i];
}
if(!safety()){
for(int i=0;i<r;i++){
available[i]+=request[i];
allocation[process][i]-=request[i];
need[process][i]+=request[i];
}
return 0;
}
return 1;
}

int main(){
int process;
int request[RESOURCES];
printf("Enter the number of processes: ");
scanf("%d",&p);
printf("Enter the number of resources: ");
scanf("%d",&r);
printf("Enter the maximum demand of each process:\n");
for(int i=0;i<p;i++){
printf("For process %d: ",i);
for(int j=0;j<r;j++){
scanf("%d",&max[i][j]);
}
}
printf("Enter the allocation for each process:\n");
for(int i=0;i<p;i++){
printf("For process %d: ",i);
for(int j=0;j<r;j++){
scanf("%d",&allocation[i][j]);
need[i][j]=max[i][j]-allocation[i][j];
}
}
printf("Enter the available resources: ");
for(int i=0;i<r;i++){
scanf("%d",&available[i]);
}
safety(); 
printf("\nEnter the process number making the request: ");
scanf("%d",&process);
printf("Enter the request for each resource: ");
for(int i=0;i<r;i++){
scanf("%d",&request[i]);
}
if(requestResources(process,request)){
printf("Request granted!\n");
}else{
printf("Request denied! System will be in unsafe state.\n");
}
return 0;
}


6.) PAGING.
CODE:
#include<stdio.h>
void main(){
int ms,fs,nof,np,rempages,i,j,x,y,pa,offset;
int s[10],fno[10][20];
printf("\nenter the memory size--");
scanf("%d",&ms);
printf("\nenter the page size--");
scanf("%d",&fs);
nof=ms/fs;
printf("\nno. of pages available in memory are--%d",nof);
printf("\nenter number of processes--");
scanf("%d",&np);
rempages=nof;
for(i=1;i<=np;i++){
printf("\nenter no. of pages required for p[%d]--",i);
scanf("%d",&s[i]);
if(s[i]>rempages){
printf("\nmemory is full");
break;
}
rempages=rempages-s[i];
printf("\nenter page table for p[%d] (frame numbers <%d)---",i,nof);
for(j=0;j<s[i];j++){
printf("\nenter frame number for page number %d:",j);
scanf("%d",&fno[i][j]);
}
}
printf("\nenter logical address to find physical address");
printf("\nenter process no. and page number and offset--");
scanf("%d%d%d",&x,&y,&offset);
if(x<np){
for(i=1;i<=np;i++){
if(y<s[i] && offset<=fs){
pa=fno[x][y]*fs+offset;
printf("\nThe Physical Address is--%d",pa);
break;
}else{
printf("\nInvalid Process or Page Number or offset");
break;
}
}
}
}


7.) A.) SINGLE LEVEL DIRECTORY.
CODE:
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

struct Directory{
char dname[10];
char fname[10][10];
int fcnt;
};

void main(){
int i,ch,k,flag=0;
char f[30];
struct Directory dir;
dir.fcnt=0;

printf("\nEnter name of directory -- ");
scanf("%s",dir.dname);

while(1){
printf("\n\n1. Create File\t 2. Delete File\t 3. Search File\t 4. Display Files\t 5. Exit\n");
printf("Enter your choice: ");
scanf("%d",&ch);
switch(ch){
case 1:
printf("\nEnter the name of the file -- ");
scanf("%s",dir.fname[dir.fcnt]);
dir.fcnt++;
break;
case 2:
printf("\nEnter the name of the file -- ");
scanf("%s",f);
for(i=0;i<dir.fcnt;i++){
if(strcmp(f,dir.fname[i])==0){
printf("File %s is deleted ",f);
for(k=i;k<dir.fcnt-1;k++)
strcpy(dir.fname[k],dir.fname[k+1]);
dir.fcnt--;
flag=1;
}
}
if(flag==0)
printf("File %s not found",f);
break;
case 3:
flag=0;
printf("\nEnter the name of the file -- ");
scanf("%s",f);
for(i=0;i<dir.fcnt;i++){
if(strcmp(f,dir.fname[i])==0){
printf("File %s is found ",f);
flag=1;
break;
}
}
if(flag==0)
printf("File %s not found",f);
break;
case 4:
if(dir.fcnt==0)
printf("\nDirectory Empty");
else{
printf("\nThe Files are -- ");
for(i=0;i<dir.fcnt;i++)
printf("\t%s",dir.fname[i]);
}
break;
default:
exit(0);
}
}
}



7.) B.) SINGLE LEVEL DIRECTORY
CODE:
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

struct Directory{
char dname[10];
char fname[10][10];
int fcnt;
} dir[10];

void main(){
int i,ch,dcnt,k;
char f[30],d[30];
dcnt=0;
while(1){
printf("\n\n1. Create Directory\t2. Create File\t3. Delete File");
printf("\n4. Search File\t\t5. Display\t6. Exit\n");
printf("Enter your choice: ");
scanf("%d",&ch);
switch(ch){
case 1:
printf("\nEnter name of directory -- ");
scanf("%s",dir[dcnt].dname);
dir[dcnt].fcnt=0;
dcnt++;
printf("Directory created");
break;
case 2:
printf("\nEnter name of the directory -- ");
scanf("%s",d);
for(i=0;i<dcnt;i++)
if(strcmp(d,dir[i].dname)==0){
printf("Enter name of the file -- ");
scanf("%s",dir[i].fname[dir[i].fcnt]);
dir[i].fcnt++;
printf("File created");
break;
}
if(i==dcnt)
printf("Directory %s not found",d);
break;
case 3:
printf("\nEnter name of the directory -- ");
scanf("%s",d);
for(i=0;i<dcnt;i++){
if(strcmp(d,dir[i].dname)==0){
printf("Enter name of the file -- ");
scanf("%s",f);
for(k=0;k<dir[i].fcnt;k++){
if(strcmp(f,dir[i].fname[k])==0){
printf("File %s is deleted ",f);
dir[i].fcnt--;
strcpy(dir[i].fname[k],dir[i].fname[dir[i].fcnt]);
goto jmp;
}
}
printf("File %s not found",f);
goto jmp;
}
}
printf("Directory %s not found",d);
jmp:
break;
case 4:
printf("\nEnter name of the directory -- ");
scanf("%s",d);
for(i=0;i<dcnt;i++){
if(strcmp(d,dir[i].dname)==0){
printf("Enter the name of the file -- ");
scanf("%s",f);
for(k=0;k<dir[i].fcnt;k++) {
if(strcmp(f,dir[i].fname[k])==0){
printf("File %s is found ",f);
goto jmp1;
}
}
printf("File %s not found",f);
jmp1:
break;
}
}
case 5:
if(dcnt==0)
printf("\nNo Directory's ");
else {
printf("\nDirectory\tFiles");
for(i=0;i<dcnt;i++){
printf("\n%s\t\t",dir[i].dname);
for(k=0;k<dir[i].fcnt;k++)
printf("\t%s",dir[i].fname[k]);
}
}
break;
default:
exit(0);
}
}
}
